// Generated by CoffeeScript 1.10.0
"use strict";
var _, argv, config, fs, gulpSh, options, pack, packData, packInfo, packName, packNames, packUrl, path, proc, sfile, spawn, t, version,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

path = require('path');

argv = require('minimist')(process.argv.slice(2));

spawn = require('child_process').spawn;

fs = require('fs-plus');

process.env.INIT_CWD = process.cwd();

options = _.extend({
  config: 'rbuild.config.js'
}, argv);

config = require('../config')(require(path.join(process.cwd(), options.config)));

gulpSh = path.join(__dirname, '../node_modules/gulp/bin/gulp.js');

if (options._.indexOf('watch') !== -1) {
  proc = spawn(gulpSh, ['watch', '--config', options.config, '--basePath', process.cwd()], {
    cwd: __dirname
  });
}

if (options._.indexOf('updatePack') !== -1) {
  sfile = require('../sfile');
  sfile.updatePackages(function(err, data) {
    if (err) {
      console.log(err);
      process.exit(1);
    }
    return console.log("update packages: " + data.packages.length);
  });
}

if (options._.indexOf('uninstall') !== -1) {
  packName = options._[1];
  if (!packName) {
    console.log('rbuild uninstall [packName]');
    process.exit(1);
  }
  pack = require('../pack');
  packData = pack.getData();
  packNames = Object.keys(packData);
  if (indexOf.call(packNames, packName) >= 0) {
    packUrl = packData[packName];
    if (packUrl.indexOf('//') === 0 || packUrl.indexOf('http') === 0) {
      pack.remove(packName);
    } else {
      packInfo = path.parse(packUrl);
      fs.removeSync(packInfo.dir);
      pack.remove(packName);
    }
    console.log("uninstall " + packName + " success");
  } else {
    console.log(packName + " Not Find");
  }
}

if (options._.indexOf('install') !== -1) {
  sfile = require('../sfile');
  packName = options._[1];
  version = null;
  if (!packName) {
    console.log('rbuild install [packName] --download');
    process.exit(1);
  }
  if (packName.indexOf('@') !== -1) {
    t = packName.split('@');
    version = t.pop();
    packName = t.pop();
  }
  sfile.get(packName, function(err, info) {
    if (err) {
      return console.log(err);
    }
    if (!info) {
      return console.log("No Find Pack : " + packName);
    }
    pack = require('../pack');
    if (options.download || options.down) {
      return sfile.download(info, function(err, outFile) {
        pack.reg(packName, outFile);
        return console.log(packName + " install success");
      });
    } else {
      pack.reg(packName, sfile.buildUrl(info, options.ssl));
      return console.log(packName + " install success");
    }
  }, version);
}

if (proc) {
  proc.stdout.on('data', function(data) {
    return console.log(data.toString());
  });
  proc.stderr.on('data', function(data) {
    return console.log(data.toString());
  });
}
