// Generated by CoffeeScript 1.10.0

/**
 * 生成pack map 
 * @date 2015-11-12 17:43:18
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 * @version $Id$
 */
var _, _writeConfigTime, config, fs, init, path, util;

path = require('path');

fs = require('fs-plus');

config = require('./config')();

util = require('./util');

_ = require('lodash');

_writeConfigTime = false;

init = function() {
  var packMapFile;
  packMapFile = config.packMapFile;
  if (false === fs.isFileSync(packMapFile)) {
    return fs.writeFileSync(packMapFile, '{}', 'utf8');
  }
};

exports.getData = function() {
  var packMapFile;
  init();
  packMapFile = config.packMapFile;
  return JSON.parse(fs.readFileSync(packMapFile, 'utf8'));
};

exports.writeConfig = function(data) {
  if (_writeConfigTime) {
    clearTimeout(_writeConfigTime);
  }
  return _writeConfigTime = setTimeout(function() {
    return exports._writeConfig(data);
  }, 100);
};

exports._writeConfig = function(data) {
  var AMDCfg, cfgFile, cfgFileName, chunkhash, packNames, paths, soure;
  paths = {};
  packNames = Object.keys(data);
  packNames.forEach(function(v) {
    var fileInfo;
    fileInfo = path.parse(data[v]);
    fileInfo.base = fileInfo.name;
    fileInfo.ext = '';
    paths[v] = path.format(fileInfo);
    if (data[v].indexOf('//') !== 0 && data[v].indexOf('http') !== 0) {
      return paths[v] = './' + paths[v];
    }
  });
  AMDCfg = _.merge(config.requirejsConfig, {
    paths: paths
  });
  soure = "requirejs.config(" + (JSON.stringify(AMDCfg)) + ");";
  chunkhash = util.md5(soure).substring(0, config.hashLen);
  cfgFileName = config.configFile.filename.replace(/\[chunkhash\]/g, chunkhash);
  cfgFile = path.join(config.configFile.output, cfgFileName);
  fs.writeFileSync(cfgFile, soure, 'utf8');
  config.configFile.plugin.forEach(function(fun) {
    return fun(cfgFile, chunkhash, soure);
  });
  return console.log("write file " + cfgFile);
};

exports.reg = function(pack, filePath) {
  var data, packMapFile;
  packMapFile = config.packMapFile;
  data = exports.getData();
  if (path.extname(filePath) === '.js') {
    if (filePath.indexOf('//') !== 0 && filePath.indexOf('http') !== 0) {
      data[pack] = path.relative(config.basePath, filePath);
    } else {
      data[pack] = filePath;
    }
    fs.writeFileSync(packMapFile, JSON.stringify(data, null, 4), 'utf8');
    exports.writeConfig(data);
  }
  return data;
};

exports.remove = function(pack) {
  var data, packMapFile;
  packMapFile = config.packMapFile;
  data = exports.getData();
  if (data.hasOwnProperty(pack)) {
    delete data[pack];
    fs.writeFileSync(packMapFile, JSON.stringify(data, null, 4), 'utf8');
    exports.writeConfig(data);
  }
  return data;
};
