// Generated by CoffeeScript 1.10.0

/**
 * 
 * @date 2015-11-12 15:34:40
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 * @version $Id$
 */
"use strict";
var _, _config, config, curPath, path;

_ = require('lodash');

path = require('path');

curPath = __dirname;

_config = {
  basePath: curPath,
  hashLen: 20,
  tplPrefix: 'tpl/',
  dataDir: '.rbuildData',
  minifyHtml: {
    collapseWhitespace: true,
    removeComments: true,
    conservativeCollapse: true
  },
  packMapFileName: 'stats.json',
  vendor: {
    output: path.join(curPath, 'js/vendor')
  },
  tpl: {
    watchFile: [],
    output: path.join(curPath, 'tpl'),
    filename: '[name].[chunkhash].min.js'
  },
  configFile: {
    filename: 'config.[chunkhash].js',
    output: path.join(curPath, 'js'),
    plugin: []
  },
  requirejsConfig: {
    paths: {}
  },
  webpackConfig: {
    watchFile: [],
    output: {
      libraryTarget: 'amd'
    },
    plugins: []
  },
  packages: {
    url: 'http://7xobb7.dl1.z0.glb.clouddn.com/packages.json',
    host: 'dn-cdnjscn.qbox.me'
  }
};

config = function(config) {
  if (false === _.isObject(config)) {
    return _config;
  }
  _config = _.merge(_config, config);
  _config.webpackConfig.plugins.push(function() {
    var pack;
    pack = require('./pack');
    return this.plugin('done', function(stats) {
      var packMap, packs;
      packMap = stats.toJson().assetsByChunkName;
      packs = Object.keys(packMap);
      return packs.forEach(function(name) {
        var filePath, packName;
        packName = packMap[name];
        if (_.isString(packName)) {
          filePath = path.join(_config.webpackConfig.output.path, packName);
          return pack.reg(name, filePath);
        } else {
          return packName.forEach(function(name) {
            filePath = path.join(_config.webpackConfig.output.path, name);
            return pack.reg(name, filePath);
          });
        }
      });
    });
  });
  _config.dataPath = path.join(_config.basePath, _config.dataDir);
  _config.packMapFile = path.join(_config.basePath, _config.packMapFileName);
  return _config;
};

config({});

module.exports = config;
