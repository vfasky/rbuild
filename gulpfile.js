// Generated by CoffeeScript 1.10.0

/**
 * 
 * @date 2015-11-13 12:47:34
 * @author vfasky <vfasky@gmail.com>
 * @link http://vfasky.com
 * @version $Id$
 */
"use strict";
var _, argv, buildTpl, cfg, config, gulp, gutil, options, pack, packInfo, packKeys, path, watch, webpack;

gulp = require('gulp');

gutil = require('gulp-util');

watch = require('gulp-watch');

path = require('path');

argv = require('minimist')(process.argv.slice(2));

_ = require('lodash');

webpack = require('webpack');

buildTpl = require('./tpl');

config = require('./config');

pack = require('./pack');

options = _.extend({
  basePath: process.cwd()
}, argv);

process.env.INIT_CWD = options.basePath;

cfg = config(require(path.join(options.basePath, options.config)));

cfg.webpackConfig.context = options.basePath;

packInfo = pack.getData();

packKeys = Object.keys(packInfo);

packKeys.forEach(function(v) {
  if (cfg.webpackConfig.externals.indexOf(v) === -1) {
    return cfg.webpackConfig.externals.push(v);
  }
});

gulp.task('webpack', function() {
  return webpack(cfg.webpackConfig, function(err, stats) {
    if (err) {
      throw new gutil.PluginError('webpack', err);
    }
    return gutil.log('[webpack]', stats.toString({
      colors: true
    }));
  });
});

gulp.task('buildTpl', function() {
  return gulp.src(cfg.tpl.watchFile).pipe(buildTpl());
});

gulp.task('watch', ['buildTpl', 'webpack'], function(done) {
  var browserSync, port;
  browserSync = {
    reload: function() {},
    stream: function() {}
  };
  if (options.server !== 'undefined') {
    port = Number(options.p !== 'undefined' && options.p || 8080);
    browserSync = require('browser-sync').create();
    browserSync.init({
      port: port,
      server: {
        baseDir: options.basePath
      }
    });
    gutil.log('[webpack-dev-server]', "http://0.0.0.0:" + port);
    watch(path.join(cfg.tpl.output, '*.js'), function() {
      return browserSync.reload();
    });
  }
  watch(cfg.tpl.watchFile, function(file) {
    console.log('change tpl: %s', file.path);
    return gulp.src(file.path).pipe(buildTpl());
  });
  return watch(cfg.webpackConfig.watchFile, function() {
    return webpack(cfg.webpackConfig, function(err, stats) {
      if (err) {
        throw new gutil.PluginError('webpack', err);
      }
      gutil.log('[webpack]', stats.toString({
        colors: true
      }));
      return browserSync.reload();
    });
  });
});
